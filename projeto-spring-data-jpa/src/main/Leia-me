Spring Data JPA

O Spring Data JPA é um projeto da família Spring Framework que facilita a integração entre o Spring e o JPA (Java Persistence API). Ele 
oferece uma abordagem mais simples e eficiente para a execução de operações de acesso a dados em bancos de dados relacionais usando o 
padrão ORM (Object-Relational Mapping).

O JPA é uma especificação do Java que permite aos desenvolvedores mapear objetos Java para entidades de banco de dados relacionais. Ele 
define uma interface padrão para a comunicação com o banco de dados, permitindo que os desenvolvedores utilizem uma API de alto nível em 
vez de lidar diretamente com SQL.

O Spring Data JPA oferece uma camada de abstração adicional sobre o JPA, tornando ainda mais fácil o desenvolvimento de aplicações baseadas 
em persistência de dados. 

A principal vantagem do Spring Data JPA é a redução da quantidade de código boilerplate necessário para implementar as operações de acesso 
a dados, o que simplifica bastante o desenvolvimento e aumenta a produtividade.

Aqui estão alguns dos principais recursos e funcionalidades do Spring Data JPA:

1. Repositórios Crud: O Spring Data JPA fornece uma interface CrudRepository que já inclui métodos comuns para criar, atualizar, recuperar 
                      e excluir entidades, sem que seja necessário escrever código SQL manualmente. Além disso, você pode estender a 
                      interface para definir consultas personalizadas.

2. Consultas Personalizadas: Além dos métodos CRUD, o Spring Data JPA permite definir consultas personalizadas usando a sintaxe do Spring 
                             Data JPA Query Methods ou consultas com anotações @Query, onde você pode escrever as consultas utilizando a 
                             linguagem JPQL (Java Persistence Query Language) ou SQL nativo.

3. Paginação e Classificação: O Spring Data JPA também fornece suporte integrado para paginação e classificação de resultados, permitindo 
                              que você recupere grandes conjuntos de dados de forma eficiente.

4. Suporte a Transações: O Spring Data JPA gerencia automaticamente as transações para você. Ele oferece integração perfeita com o Spring 
                         Transaction Management, garantindo que as operações de acesso a dados sejam tratadas de forma segura e consistente.

5. Integração com outros módulos do Spring: O Spring Data JPA pode ser facilmente integrado com outros módulos do Spring, como o Spring 
                                            Boot, Spring MVC e Spring Security, proporcionando uma experiência de desenvolvimento coesa e 
                                            consistente.

Para começar a usar o Spring Data JPA, você precisa adicionar as dependências apropriadas em seu projeto Maven ou Gradle. Em seguida, você 
pode criar suas entidades JPA (anotadas com @Entity) e interfaces de repositório que estendam as interfaces do Spring Data JPA.

Aqui está um exemplo básico de uma entidade e seu repositório usando o Spring Data JPA:

O Spring Data JPA é uma excelente escolha para desenvolvedores que desejam aumentar a produtividade ao trabalhar com persistência de dados 
em aplicações Spring, permitindo que eles se concentrem mais na lógica de negócios e menos nos detalhes da interação com o banco de dados.

------------ // ------------ 

Introdução ao JPQL

O Java Persistence Query Language é uma linguagem de consulta orientado a objetos, independente da plataforma definida como parte da 
especificação Java Persistence API. O JPQL é usada para fazer consultas em entidades de armazenadas em um banco de dados relacional.

O JPQL é semelhante à SQL (Structured Query Language), mas em vez de trabalhar diretamente com tabelas e colunas do banco de dados, ele 
opera com entidades JPA e seus atributos. Com o JPQL, você pode escrever consultas que envolvam entidades, associações entre entidades e 
até mesmo funções de agregação.

Exemplificando:

1.
@Repository
public interface InterfacePessoaSpringData extends CrudRepository<PessoaSpringData, Long>

   @Query(value = "select p from PessoaSpringData p where p.nome like %?1%")
   public List<PessoaSpringData> buscarPorId(String nome);

   @Query(value = "select p from PessoaSpringData p where p.nome = :paramnome")
    public PessoasSpringData buscarPorNomeParam(@Param("paramnome") String paramnome);


2. 
Consultas de Seleção: O JPQL permite que você escreva consultas de seleção para recuperar atributos específicos de uma ou várias entidades. 
Por exemplo:

    SELECT p FROM Produto p WHERE p.preco > 100.0
Esta consulta JPQL recupera todos os objetos de entidade "Produto" cujo preço seja maior que 100.0.

3. 
Consultas com Junção (JOIN): O JPQL permite realizar junções entre entidades associadas usando a cláusula JOIN. Por exemplo:

    SELECT c FROM Cliente c JOIN c.pedidos p WHERE p.valorTotal > 500.0
Neste caso, a consulta JPQL recupera todos os objetos de entidade "Cliente" que possuem pedidos com valor total superior a 500.0.

4. 
Consultas com Parâmetros: O JPQL permite usar parâmetros em suas consultas, o que torna suas consultas mais flexíveis e seguras contra 
ataques de injeção de SQL. Por exemplo:
   
     SELECT c FROM Cliente c WHERE c.nome LIKE :nome
Aqui, ":nome" é um parâmetro que você pode vincular a um valor específico ao executar a consulta.

5. 
Consultas de Atualização e Exclusão: Além de consultas de seleção, o JPQL também suporta consultas de atualização e exclusão. Por exemplo:

   UPDATE Produto p SET p.preco = p.preco * 1.1 WHERE p.preco < 100.0
Esta consulta JPQL aumenta o preço de todos os produtos com preço inferior a 100.0 em 10%.

6. 
Funções de Agregação: O JPQL suporta funções de agregação, como COUNT, SUM, AVG, MAX, MIN, entre outras, permitindo que você realize 
operações estatísticas em seus dados. Por exemplo:

   SELECT COUNT(p) FROM Produto p
Esta consulta JPQL conta o número total de objetos de entidade "Produto".

É importante notar que, embora o JPQL seja independente de banco de dados, ele ainda é traduzido para SQL pelo provedor de persistência 
JPA específico que você estiver usando (por exemplo, Hibernate, EclipseLink). Isso significa que, embora o JPQL ofereça abstração, é 
fundamental garantir que suas consultas sejam compatíveis com o provedor JPA utilizado.

O JPQL é uma parte crucial do JPA e oferece aos desenvolvedores uma maneira poderosa e flexível de escrever consultas de banco de dados 
orientadas a objetos. Ele é amplamente utilizado em aplicações Java que empregam o mapeamento objeto-relacional através do JPA para 
acessar e manipular dados em bancos de dados relacionais.

------------ // ------------ 

Interface CrudRepository

A interface CrudRepository é uma das principais interfaces fornecidas pelo Spring Data JPA. Ela é uma abstração que oferece métodos básicos 
para realizar operações CRUD (Create, Read, Update e Delete) em entidades JPA, sem a necessidade de escrever implementações específicas 
para essas operações.

A CrudRepository faz parte do subprojeto Spring Data Commons, que fornece funcionalidades comuns para todos os projetos Spring Data, 
incluindo Spring Data JPA.

Aqui estão alguns dos métodos principais fornecidos pela interface CrudRepository:

1. `save(entity)`: Salva uma entidade no banco de dados. Se a entidade já existe no banco de dados (com base na chave primária), ela será 
atualizada; caso contrário, será criada uma nova entrada no banco de dados.

2. `saveAll(entities)`: Salva uma lista de entidades no banco de dados. Essa operação é realizada de forma mais eficiente em lote, quando 
suportada pelo provedor JPA.

3. `findById(id)`: Recupera uma entidade pelo seu ID (chave primária).

4. `existsById(id)`: Verifica se uma entidade com o ID fornecido existe no banco de dados.

5. `findAll()`: Recupera todas as entidades do banco de dados.

6. `findAllById(ids)`: Recupera uma lista de entidades com base em uma lista de IDs (chaves primárias).

7. `count()`: Retorna o número total de entidades no banco de dados.

8. `delete(entity)`: Exclui a entidade fornecida do banco de dados.

9. `deleteById(id)`: Exclui a entidade com o ID fornecido do banco de dados.

10. `deleteAll()`: Exclui todas as entidades do banco de dados.

A CrudRepository é uma interface genérica, onde você deve fornecer a classe de entidade (classe Java anotada com `@Entity`) e o tipo de 
sua chave primária como parâmetros de tipo. 

A interface CrudRepository é uma excelente escolha quando você deseja executar operações CRUD padrão em suas entidades JPA sem a necessidade 
de escrever implementações personalizadas para cada operação. No entanto, se você precisar de consultas personalizadas ou operações mais 
complexas, pode estender outras interfaces fornecidas pelo Spring Data JPA, como JpaRepository, que estende CrudRepository e adiciona 
suporte para consultas JPQL e SQL nativas.

------------ // ------------

Anotação @Repository

A anotação @Repository é uma das anotações do Spring Framework utilizada para marcar classes como componentes que têm a função específica 
de trabalhar como repositórios de acesso a dados. Essa anotação faz parte do subsistema de IoC (Inversion of Control) do Spring e é 
comumente usada em conjunto com o Spring Data JPA para implementar camadas de acesso a dados de forma mais fácil e com recursos adicionais, 
como gerenciamento de transações.

Ao marcar uma classe com a anotação @Repository, o Spring irá automaticamente detectar e criar uma instância gerenciada pelo contêiner de 
IoC. Essa instância é tratada como um componente especializado para o acesso a dados, e é possível injetar essa instância em outras 
classes que precisam interagir com o banco de dados.

