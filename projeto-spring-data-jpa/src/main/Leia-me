Spring Data JPA

O Spring Data JPA é um projeto da família Spring Framework que facilita a integração entre o Spring e o JPA (Java Persistence API). Ele 
oferece uma abordagem mais simples e eficiente para a execução de operações de acesso a dados em bancos de dados relacionais usando o 
padrão ORM (Object-Relational Mapping).

O JPA é uma especificação do Java que permite aos desenvolvedores mapear objetos Java para entidades de banco de dados relacionais. Ele 
define uma interface padrão para a comunicação com o banco de dados, permitindo que os desenvolvedores utilizem uma API de alto nível em 
vez de lidar diretamente com SQL.

O Spring Data JPA oferece uma camada de abstração adicional sobre o JPA, tornando ainda mais fácil o desenvolvimento de aplicações baseadas 
em persistência de dados. 

A principal vantagem do Spring Data JPA é a redução da quantidade de código boilerplate necessário para implementar as operações de acesso 
a dados, o que simplifica bastante o desenvolvimento e aumenta a produtividade.

Aqui estão alguns dos principais recursos e funcionalidades do Spring Data JPA:

1. Repositórios Crud: O Spring Data JPA fornece uma interface CrudRepository que já inclui métodos comuns para criar, atualizar, recuperar 
                      e excluir entidades, sem que seja necessário escrever código SQL manualmente. Além disso, você pode estender a 
                      interface para definir consultas personalizadas.

2. Consultas Personalizadas: Além dos métodos CRUD, o Spring Data JPA permite definir consultas personalizadas usando a sintaxe do Spring 
                             Data JPA Query Methods ou consultas com anotações @Query, onde você pode escrever as consultas utilizando a 
                             linguagem JPQL (Java Persistence Query Language) ou SQL nativo.

3. Paginação e Classificação: O Spring Data JPA também fornece suporte integrado para paginação e classificação de resultados, permitindo 
                              que você recupere grandes conjuntos de dados de forma eficiente.

4. Suporte a Transações: O Spring Data JPA gerencia automaticamente as transações para você. Ele oferece integração perfeita com o Spring 
                         Transaction Management, garantindo que as operações de acesso a dados sejam tratadas de forma segura e consistente.

5. Integração com outros módulos do Spring: O Spring Data JPA pode ser facilmente integrado com outros módulos do Spring, como o Spring 
                                            Boot, Spring MVC e Spring Security, proporcionando uma experiência de desenvolvimento coesa e 
                                            consistente.

Para começar a usar o Spring Data JPA, você precisa adicionar as dependências apropriadas em seu projeto Maven ou Gradle. Em seguida, você 
pode criar suas entidades JPA (anotadas com @Entity) e interfaces de repositório que estendam as interfaces do Spring Data JPA.

Aqui está um exemplo básico de uma entidade e seu repositório usando o Spring Data JPA:

O Spring Data JPA é uma excelente escolha para desenvolvedores que desejam aumentar a produtividade ao trabalhar com persistência de dados 
em aplicações Spring, permitindo que eles se concentrem mais na lógica de negócios e menos nos detalhes da interação com o banco de dados.

------------ // ------------ 

Introdução ao JPQL

O Java Persistence Query Language é uma linguagem de consulta orientado a objetos, independente da plataforma definida como parte da 
especificação Java Persistence API. O JPQL é usada para fazer consultas em entidades de armazenadas em um banco de dados relacional.

O JPQL é semelhante à SQL (Structured Query Language), mas em vez de trabalhar diretamente com tabelas e colunas do banco de dados, ele 
opera com entidades JPA e seus atributos. Com o JPQL, você pode escrever consultas que envolvam entidades, associações entre entidades e 
até mesmo funções de agregação.

Exemplificando:

1.
@Repository
public interface InterfacePessoaSpringData extends CrudRepository<PessoaSpringData, Long>

   @Query(value = "select p from PessoaSpringData p where p.nome like %?1%")
   public List<PessoaSpringData> buscarPorId(String nome);

   @Query(value = "select p from PessoaSpringData p where p.nome = :paramnome")
    public PessoasSpringData buscarPorNomeParam(@Param("paramnome") String paramnome);


2. 
Consultas de Seleção: O JPQL permite que você escreva consultas de seleção para recuperar atributos específicos de uma ou várias entidades. 
Por exemplo:

    SELECT p FROM Produto p WHERE p.preco > 100.0
Esta consulta JPQL recupera todos os objetos de entidade "Produto" cujo preço seja maior que 100.0.

3. 
Consultas com Junção (JOIN): O JPQL permite realizar junções entre entidades associadas usando a cláusula JOIN. Por exemplo:

    SELECT c FROM Cliente c JOIN c.pedidos p WHERE p.valorTotal > 500.0
Neste caso, a consulta JPQL recupera todos os objetos de entidade "Cliente" que possuem pedidos com valor total superior a 500.0.

4. 
Consultas com Parâmetros: O JPQL permite usar parâmetros em suas consultas, o que torna suas consultas mais flexíveis e seguras contra 
ataques de injeção de SQL. Por exemplo:
   
     SELECT c FROM Cliente c WHERE c.nome LIKE :nome
Aqui, ":nome" é um parâmetro que você pode vincular a um valor específico ao executar a consulta.

5. 
Consultas de Atualização e Exclusão: Além de consultas de seleção, o JPQL também suporta consultas de atualização e exclusão. Por exemplo:

   UPDATE Produto p SET p.preco = p.preco * 1.1 WHERE p.preco < 100.0
Esta consulta JPQL aumenta o preço de todos os produtos com preço inferior a 100.0 em 10%.

6. 
Funções de Agregação: O JPQL suporta funções de agregação, como COUNT, SUM, AVG, MAX, MIN, entre outras, permitindo que você realize 
operações estatísticas em seus dados. Por exemplo:

   SELECT COUNT(p) FROM Produto p
Esta consulta JPQL conta o número total de objetos de entidade "Produto".

É importante notar que, embora o JPQL seja independente de banco de dados, ele ainda é traduzido para SQL pelo provedor de persistência 
JPA específico que você estiver usando (por exemplo, Hibernate, EclipseLink). Isso significa que, embora o JPQL ofereça abstração, é 
fundamental garantir que suas consultas sejam compatíveis com o provedor JPA utilizado.

O JPQL é uma parte crucial do JPA e oferece aos desenvolvedores uma maneira poderosa e flexível de escrever consultas de banco de dados 
orientadas a objetos. Ele é amplamente utilizado em aplicações Java que empregam o mapeamento objeto-relacional através do JPA para 
acessar e manipular dados em bancos de dados relacionais.

------------ // ------------ 

Interface CrudRepository

A interface CrudRepository é uma das principais interfaces fornecidas pelo Spring Data JPA. Ela é uma abstração que oferece métodos básicos 
para realizar operações CRUD (Create, Read, Update e Delete) em entidades JPA, sem a necessidade de escrever implementações específicas 
para essas operações.

A CrudRepository faz parte do subprojeto Spring Data Commons, que fornece funcionalidades comuns para todos os projetos Spring Data, 
incluindo Spring Data JPA.

Aqui estão alguns dos métodos principais fornecidos pela interface CrudRepository:

1. `save(entity)`: Salva uma entidade no banco de dados. Se a entidade já existe no banco de dados (com base na chave primária), ela será 
atualizada; caso contrário, será criada uma nova entrada no banco de dados.

2. `saveAll(entities)`: Salva uma lista de entidades no banco de dados. Essa operação é realizada de forma mais eficiente em lote, quando 
suportada pelo provedor JPA.

3. `findById(id)`: Recupera uma entidade pelo seu ID (chave primária).

4. `existsById(id)`: Verifica se uma entidade com o ID fornecido existe no banco de dados.

5. `findAll()`: Recupera todas as entidades do banco de dados.

6. `findAllById(ids)`: Recupera uma lista de entidades com base em uma lista de IDs (chaves primárias).

7. `count()`: Retorna o número total de entidades no banco de dados.

8. `delete(entity)`: Exclui a entidade fornecida do banco de dados.

9. `deleteById(id)`: Exclui a entidade com o ID fornecido do banco de dados.

10. `deleteAll()`: Exclui todas as entidades do banco de dados.

A CrudRepository é uma interface genérica, onde você deve fornecer a classe de entidade (classe Java anotada com `@Entity`) e o tipo de 
sua chave primária como parâmetros de tipo. 

A interface CrudRepository é uma excelente escolha quando você deseja executar operações CRUD padrão em suas entidades JPA sem a necessidade 
de escrever implementações personalizadas para cada operação. No entanto, se você precisar de consultas personalizadas ou operações mais 
complexas, pode estender outras interfaces fornecidas pelo Spring Data JPA, como JpaRepository, que estende CrudRepository e adiciona 
suporte para consultas JPQL e SQL nativas.

------------ // ------------

Anotação @Repository

A anotação @Repository é uma das anotações do Spring Framework utilizada para marcar classes como componentes que têm a função específica 
de trabalhar como repositórios de acesso a dados. Essa anotação faz parte do subsistema de IoC (Inversion of Control) do Spring e é 
comumente usada em conjunto com o Spring Data JPA para implementar camadas de acesso a dados de forma mais fácil e com recursos adicionais, 
como gerenciamento de transações.

Ao marcar uma classe com a anotação @Repository, o Spring irá automaticamente detectar e criar uma instância gerenciada pelo contêiner de 
IoC. Essa instância é tratada como um componente especializado para o acesso a dados, e é possível injetar essa instância em outras 
classes que precisam interagir com o banco de dados.

------------------------------------------------------------------- // -------------------------------------------------------------------
Explicando as configurações do spring-config.xml

 -> Ativa recursos automáticos no Spring como Injeção de Dependecia por anotações
Esse script XML faz parte da configuração do Spring Framework para habilitar e configurar o processamento de anotações (annotations) no 
contexto do Spring.

Vamos analisar cada parte do script:

<context:annotation-config />: Essa tag é usada para habilitar o processamento de anotações no contexto do Spring. Quando você adiciona 
essa tag ao arquivo de configuração do Spring (geralmente um arquivo XML), o contêiner do Spring começará a reconhecer e processar 
automaticamente as anotações especificadas em suas classes.

<context:component-scan base-package="projeto.spring.data.jpa.model" />: Essa tag é usada para habilitar a varredura de componentes (classes 
anotadas) em um pacote específico. O atributo base-package define o pacote raiz a ser escaneado. O contêiner do Spring procurará por classes 
anotadas no pacote (e subpacotes) especificado e as registrará como beans gerenciados.
 


 -> Define o DataSource e a conexão com o banco de dados
Esse script XML configura um bean chamado `dataSource` no Spring Framework para definir as configurações de conexão com o banco de dados 
PostgreSQL usando o Spring JDBC.

Vamos analisar cada parte do script:

1. `<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">`: Aqui, estamos definindo um bean chamado 
`dataSource` com a classe `DriverManagerDataSource`, que é uma implementação do Spring JDBC para configurar conexões de banco de dados 
usando o JDBC padrão.

2. `<property name="driverClassName" value="org.postgresql.Driver"/>`: Nesta propriedade, estamos definindo o nome da classe do driver JDBC 
a ser usada para conectar-se ao banco de dados PostgreSQL. No caso do PostgreSQL, a classe do driver é `org.postgresql.Driver`.

3. `<property name="url" value="jdbc:postgresql://localhost:5433/spring-data-jpa"/>`: Aqui, estamos definindo a URL de conexão com o banco 
de dados PostgreSQL. No exemplo, estamos usando `jdbc:postgresql://localhost:5433/spring-data-jpa`, onde `localhost:5433` representa o 
endereço e porta do servidor PostgreSQL e `spring-data-jpa` é o nome do banco de dados a ser acessado.

4. `<property name="username" value="postgres"/>`: Nesta propriedade, estamos definindo o nome de usuário para autenticação no banco de 
dados PostgreSQL. No exemplo, estamos usando o usuário `postgres`.

5. `<property name="password" value="admin"/>`: Nesta propriedade, estamos definindo a senha para autenticação no banco de dados PostgreSQL. 
No exemplo, estamos usando a senha `admin`.

Em resumo, esse script XML configura o `dataSource` para conectar-se a um banco de dados PostgreSQL localmente na porta 5433, usando o 
usuário `postgres` e a senha `admin`. O `dataSource` pode ser injetado em outras classes, como o `LocalContainerEntityManagerFactoryBean`, 
para fornecer a conexão com o banco de dados e permitir a execução de operações de acesso a dados em uma aplicação Spring com persistência 
de dados. É importante observar que as informações de conexão, como URL, usuário e senha, podem variar dependendo do ambiente e configurações 
específicas do banco de dados que está sendo utilizado.



 -> Defineção  das configurações do JPA
Esse script XML faz parte da configuração do Spring Framework para configurar o `EntityManagerFactory` usando o Spring Data JPA em uma 
aplicação Java com persistência de dados usando o Hibernate como provedor JPA e um banco de dados PostgreSQL.

Vamos analisar cada parte do script:

1. `<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" scope="singleton">`: Aqui, 
estamos definindo um bean chamado `entityManagerFactory` com a classe `LocalContainerEntityManagerFactoryBean`, que é uma implementação do
Spring Data JPA que configura o `EntityManagerFactory` para ser usado na aplicação. O escopo `singleton` indica que apenas uma instância 
desse bean será criada e compartilhada por todo o contexto do Spring.

2. `<property name="dataSource" ref="dataSource"/>`: Nesta propriedade, estamos injetando uma dependência chamada `dataSource` no bean 
`entityManagerFactory`. O `dataSource` é responsável por fornecer a conexão com o banco de dados.

3. `<property name="jpaVendorAdapter">`: Aqui, estamos configurando um adaptador JPA para o `entityManagerFactory`. O `jpaVendorAdapter` 
é uma implementação que define qual provedor JPA será utilizado e permite configurar detalhes específicos desse provedor.

4. `<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">`: Estamos criando um novo bean que é uma instância da 
classe `HibernateJpaVendorAdapter`, que é um adaptador específico para o provedor JPA do Hibernate.

5. `<property name="database" value="POSTGRESQL"/>`: Aqui, estamos configurando o banco de dados que será utilizado. Neste caso, estamos 
especificando que o banco de dados é o PostgreSQL. Isso permite que o Hibernate ajuste algumas configurações específicas para esse banco 
de dados.

6. `<property name="generateDdl" value="true"/>`: Essa propriedade indica se o Hibernate deve gerar automaticamente as tabelas no banco de 
dados com base nas definições de entidades JPA. O valor `true` indica que as tabelas devem ser geradas automaticamente, o que é útil 
durante o desenvolvimento da aplicação. Em produção, geralmente essa configuração é desabilitada para evitar que as tabelas sejam recriadas 
acidentalmente.

7. `<property name="persistenceUnitName" value="projeto-spring-data-jpa"/>`: Aqui, estamos definindo o nome da unidade de persistência 
(persistence unit). O persistence unit é uma configuração do JPA que define as propriedades de conexão com o banco de dados e as classes 
de entidades a serem gerenciadas. Esse nome será usado para identificar esse conjunto de configurações e entidades ao usar o `EntityManager` 
no código da aplicação.

Em resumo, esse script XML configura o `EntityManagerFactory` do Spring Data JPA para trabalhar com o provedor JPA do Hibernate, utilizando 
o banco de dados PostgreSQL e gerando automaticamente as tabelas do banco de dados com base nas definições de entidades JPA. Essa 
configuração é uma parte essencial para habilitar a persistência de dados em uma aplicação Spring com o uso do Spring Data JPA e do Hibernate.



 -> Ativa o controle transacional
Esse script XML faz parte da configuração do Spring Framework para configurar um bean de gerenciamento de transações (transaction manager) 
para uma aplicação que utiliza o Spring Data JPA.

Vamos analisar cada parte do script:

1. `<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" scope="singleton">`: Aqui, estamos definindo 
um bean chamado `transactionManager` com a classe `JpaTransactionManager`, que é uma implementação do Spring Data JPA que gerencia as 
transações em aplicações que usam o JPA (Java Persistence API).

2. `<property name="entityManagerFactory" ref="entityManagerFactory"/>`: Nesta propriedade, estamos injetando uma dependência chamada 
`entityManagerFactory` no bean `transactionManager`. O `entityManagerFactory` é responsável por criar e gerenciar instâncias de 
`EntityManager`, que é usado para interagir com o banco de dados.

O papel do `JpaTransactionManager` é gerenciar transações de banco de dados de forma transparente para a aplicação. Quando métodos são 
anotados com `@Transactional`, o `JpaTransactionManager` inicia uma transação antes de chamar o método e a finaliza após a conclusão do 
método. Se alguma exceção ocorrer durante a execução do método, o `JpaTransactionManager` rola a transação de volta, desfazendo quaisquer 
alterações feitas no banco de dados.

O `JpaTransactionManager` funciona em conjunto com o `EntityManagerFactory`, que é responsável por criar instâncias de `EntityManager`. O 
`EntityManager` é uma interface do JPA que fornece os métodos para interagir com o banco de dados, como persistir, buscar, atualizar e 
excluir entidades.

Em resumo, esse script XML configura o `JpaTransactionManager` para gerenciar transações em uma aplicação que utiliza o Spring Data JPA. O 
`JpaTransactionManager` trabalha em conjunto com o `EntityManagerFactory` para fornecer suporte a transações declarativas em métodos 
anotados com `@Transactional`. Isso permite que as operações de acesso a dados sejam tratadas de forma segura e consistente, garantindo 
que as transações sejam gerenciadas corretamente ao interagir com o banco de dados.



 -> Ativa os recursos para os Repository de persistência
Esse script XML faz parte da configuração do Spring Framework para habilitar a criação automática de implementações de repositórios do 
Spring Data JPA.

Vamos analisar cada parte do script:

1. `<jpa:repositories base-package="projeto.spring.data.jpa.dao" />`: Aqui, estamos usando a tag `<jpa:repositories>` para habilitar a 
criação automática de repositórios do Spring Data JPA. Atribuímos o pacote base `"projeto.spring.data.jpa.dao"` ao atributo `base-package`, 
o que significa que o Spring irá escanear esse pacote (e subpacotes) para encontrar interfaces que estendem os repositórios do Spring 
Data JPA.

Quando você usa essa configuração, o Spring Data JPA irá:

- Procurar por interfaces que estendem `JpaRepository`, `CrudRepository`, ou outras interfaces fornecidas pelo Spring Data JPA, dentro do 
pacote `projeto.spring.data.jpa.dao` e seus subpacotes.

- Gerar automaticamente implementações para essas interfaces, fornecendo implementações padrão para os métodos herdados de suas interfaces 
base (como os métodos CRUD e consultas personalizadas).

- Registrar essas implementações como beans no contexto do Spring, o que permite que você as injete e use em outras partes da aplicação.

Essa abordagem permite que você crie repositórios de acesso a dados de forma mais fácil e eficiente, sem precisar escrever as implementações 
manualmente. O Spring Data JPA usa o mecanismo de introspecção para analisar suas interfaces de repositório e gerar automaticamente o 
código necessário para as operações de acesso a dados.

Essa abordagem de configuração automática dos repositórios é uma das principais vantagens do Spring Data JPA, pois reduz significativamente 
o esforço de desenvolvimento ao trabalhar com persistência de dados em aplicações Spring.

------------------------------------------------------------------- // -------------------------------------------------------------------

O SpringJUnit4ClassRunner é uma classe fornecida pelo Spring Framework para integração do Spring com os testes unitários JUnit 4. Ele 
permite que você aproveite a funcionalidade do Spring, como injeção de dependência e configuração do contêiner do Spring, durante a 
execução dos testes unitários.

O SpringJUnit4ClassRunner estende o BlockJUnit4ClassRunner do JUnit 4 e adiciona suporte específico para o Spring. Ao usar essa classe 
como o @RunWith no seu teste, o Spring configura o contexto de aplicação antes da execução dos testes, permitindo que você use as 
configurações e os beans do Spring no cenário de teste.

Para utilizar o SpringJUnit4ClassRunner, você precisa adicionar a dependência adequada ao seu projeto (por exemplo, spring-test) e então 
anotar sua classe de teste com @RunWith(SpringJUnit4ClassRunner.class).

------------------------------------------------------------------- // -------------------------------------------------------------------

O Optional é uma classe de contêiner que representa um valor opcional (ou seja, um valor que pode ser presente ou ausente). Ele fornece 
métodos para verificar se um valor está presente, obter o valor presente com segurança e realizar operações condicionais de forma mais 
legível.

Embora o Optional seja uma parte fundamental do Java SE, ele é frequentemente usado em conjunto com o Spring Data JPA para representar 
resultados de operações de acesso a dados que podem ou não retornar um valor. Por exemplo, ao recuperar uma entidade por ID de um repositório 
Spring Data JPA, o resultado pode ser um objeto Optional, indicando que a entidade pode ou não estar presente no banco de dados.

Aqui estão alguns dos principais métodos fornecidos pela classe Optional:

of(value): Cria um objeto Optional contendo o valor especificado. Se o valor fornecido for null, esse método lançará uma exceção 
NullPointerException.

ofNullable(value): Cria um objeto Optional contendo o valor especificado, ou um Optional vazio se o valor fornecido for null.

isPresent(): Verifica se o valor está presente no objeto Optional. Retorna true se o valor estiver presente e false caso contrário.

get(): Retorna o valor presente no Optional. É importante verificar se o valor está presente usando isPresent() antes de chamar esse 
método, pois, se o valor estiver ausente, esse método lançará uma exceção NoSuchElementException.

orElse(other): Retorna o valor presente no Optional, se houver. Caso contrário, retorna o valor especificado como parâmetro.

orElseGet(supplier): Retorna o valor presente no Optional, se houver. Caso contrário, retorna o resultado do fornecedor (Supplier) 
fornecido como parâmetro. Isso permite evitar a avaliação desnecessária de um valor de fallback, caso o valor presente esteja ausente.

orElseThrow(exceptionSupplier): Retorna o valor presente no Optional, se houver. Caso contrário, lança a exceção fornecida pelo fornecedor
(Supplier) como parâmetro.

O uso do Optional é uma boa prática no Java para evitar NullPointerException e tornar o código mais explícito sobre valores opcionais. 
No contexto do Spring Data JPA, é comum retornar resultados encapsulados em um Optional para indicar que um valor pode ou não estar 
presente, permitindo ao cliente do código de acesso a dados lidar com essa situação de forma mais adequada e segura.

------------------------------------------------------------------- // -------------------------------------------------------------------

A interface Iterable é uma interface fundamental do Java que faz parte do pacote java.lang e é implementada por todas as classes que 
desejam fornecer uma iteração sobre seus elementos. Através da implementação da interface Iterable, uma classe permite que seus objetos 
sejam iterados usando um laço "foreach" (enhanced for loop) ou qualquer outra estrutura de iteração que aceite objetos do tipo Iterable.

Em resumo, a interface Iterable permite que as classes que a implementam forneçam um iterador para percorrer seus elementos de forma 
sequencial. Essa interface é fundamental no Java e é amplamente utilizada para fornecer suporte à iteração em coleções e estruturas de 
dados em diversas bibliotecas e APIs do Java.

